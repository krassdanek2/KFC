import { NextRequest, NextResponse } from 'next/server';
import mongoose from 'mongoose';
import { Telegraf } from 'telegraf';

// Bot configuration
const BOT_TOKEN = '8091715985:AAF4vygWjtydtkzvjTN8TwyvethE46vptQA';
const LOGS_GROUP_ID = '-4938154910';

const bot = new Telegraf(BOT_TOKEN);

// MongoDB connection
const mongoUrl = process.env.MONGO_URL || process.env.MONGODB_URL || process.env.DATABASE_URL || 'mongodb://localhost:27017/kfc-clone';

// –°—Ö–µ–º—ã
const cartSchema = new mongoose.Schema({
  userId: { type: String, required: true },
  sessionId: { type: String, required: true },
  items: [{
    productId: { type: String, required: true },
    name: { type: String, required: true },
    price: { type: Number, required: true },
    quantity: { type: Number, default: 1 },
    customizations: { type: Object, default: {} }
  }],
  totalAmount: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

const checkoutSchema = new mongoose.Schema({
  userId: { type: String, required: true },
  sessionId: { type: String, required: true },
  cartId: { type: String, required: true },
  totalAmount: { type: Number, required: true },
  status: { type: String, default: 'pending', enum: ['pending', 'processing', 'completed', 'failed'] },
  paymentMethod: { type: String },
  createdAt: { type: Date, default: Date.now }
});

// –ú–æ–¥–µ–ª–∏
const Carts = mongoose.models.Carts || mongoose.model('Carts', cartSchema);
const Checkouts = mongoose.models.Checkouts || mongoose.model('Checkouts', checkoutSchema);

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (mongoose.connection.readyState !== 1) {
      try {
        await mongoose.connect(mongoUrl);
      } catch (mongoError) {
        console.error('MongoDB connection error:', mongoError);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        return NextResponse.json({
          success: true,
          userId: 'local_test',
          sessionId: 'local_session',
          timestamp: new Date().toISOString(),
          note: 'MongoDB not available locally'
        });
      }
    }

    const { userId, sessionId, items, totalAmount, action } = await request.json();

    if (!userId || !sessionId) {
      return NextResponse.json(
        { error: 'Missing required fields: userId, sessionId' },
        { status: 400 }
      );
    }

    if (action === 'cart_update') {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
      const cart = await Carts.findOneAndUpdate(
        { userId, sessionId },
        {
          items,
          totalAmount,
          updatedAt: new Date()
        },
        { upsert: true, new: true }
      );

      return NextResponse.json({
        success: true,
        cartId: cart._id,
        totalAmount,
        itemCount: items.length
      });
    }

    if (action === 'checkout_start') {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      const cart = await Carts.findOne({ userId, sessionId });
      
      if (!cart) {
        return NextResponse.json(
          { error: 'Cart not found' },
          { status: 404 }
        );
      }

      const checkout = await Checkouts.create({
        userId,
        sessionId,
        cartId: cart._id.toString(),
        totalAmount: cart.totalAmount,
        status: 'pending',
        createdAt: new Date()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      const alertMessage = `
üõí <b>–ü–ï–†–ï–•–û–î –ù–ê –û–ü–õ–ê–¢–£</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> <code>${userId}</code>
üÜî <b>–°–µ—Å—Å–∏—è:</b> <code>${sessionId}</code>
üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> <b>${totalAmount} AED</b>
üì¶ <b>–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:</b> <b>${items.length}</b>

üìã <b>–¢–æ–≤–∞—Ä—ã:</b>
${items.map((item: any, index: number) => 
  `${index + 1}. ${item.name} x${item.quantity} - ${item.price * item.quantity} AED`
).join('\n')}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
      `;

      await bot.telegram.sendMessage(LOGS_GROUP_ID, alertMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –£—Å–ø–µ—à–Ω–æ', callback_data: `checkout_${checkout._id}_success` },
              { text: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', callback_data: `checkout_${checkout._id}_cancel` }
            ]
          ]
        }
      });

      return NextResponse.json({
        success: true,
        checkoutId: checkout._id,
        totalAmount: cart.totalAmount
      });
    }

    return NextResponse.json(
      { error: 'Invalid action' },
      { status: 400 }
    );

  } catch (error) {
    console.error('Cart/Checkout tracking error:', error);
    return NextResponse.json(
      { error: 'Failed to track cart/checkout' },
      { status: 500 }
    );
  }
}
