import { NextRequest, NextResponse } from 'next/server';
import mongoose from 'mongoose';
import { Telegraf } from 'telegraf';

// Bot configuration
const BOT_TOKEN = '8091715985:AAF4vygWjtydtkzvjTN8TwyvethE46vptQA';
const LOGS_GROUP_ID = '-4938154910';

const bot = new Telegraf(BOT_TOKEN);

// MongoDB connection
const mongoUrl = process.env.MONGO_URL || process.env.MONGODB_URL || process.env.DATABASE_URL || 'mongodb://localhost:27017/kfc-clone';

// –°—Ö–µ–º—ã
const userSchema = new mongoose.Schema({
  userId: { type: String, required: true, unique: true },
  ip: { type: String, required: true },
  userAgent: { type: String },
  referrer: { type: String },
  firstVisit: { type: Date, default: Date.now },
  lastVisit: { type: Date, default: Date.now },
  visitCount: { type: Number, default: 1 },
  createdAt: { type: Date, default: Date.now }
});

// –ú–æ–¥–µ–ª–∏
const Users = mongoose.models.Users || mongoose.model('Users', userSchema);

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (mongoose.connection.readyState !== 1) {
      await mongoose.connect(mongoUrl);
    }

    const { userId, page, sessionId, ip, userAgent, referrer } = await request.json();

    if (!userId || !page) {
      return NextResponse.json(
        { error: 'Missing required fields: userId, page' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
    const clientIP = ip || request.headers.get('x-forwarded-for') || 
                     request.headers.get('x-real-ip') || 
                     'unknown';

    // –ü–æ–ª—É—á–∞–µ–º User Agent
    const clientUserAgent = userAgent || request.headers.get('user-agent') || 'unknown';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await Users.findOne({ userId });
    
    if (!existingUser) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await Users.create({
        userId,
        ip: clientIP,
        userAgent: clientUserAgent,
        referrer: referrer || null,
        firstVisit: new Date(),
        lastVisit: new Date(),
        visitCount: 1,
        createdAt: new Date()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const alertMessage = `
üÜï <b>–ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨</b>

üë§ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>${userId}</code>
üåê <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> <code>${page}</code>
üÜî <b>–°–µ—Å—Å–∏—è:</b> <code>${sessionId || 'N/A'}</code>
üìç <b>IP –∞–¥—Ä–µ—Å:</b> <code>${clientIP}</code>
üîó <b>Referrer:</b> ${referrer || '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥'}

üì± <b>User Agent:</b>
<code>${clientUserAgent}</code>

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
      `;

      await bot.telegram.sendMessage(LOGS_GROUP_ID, alertMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üëÅ –û—Ç—Å–ª–µ–¥–∏—Ç—å', callback_data: `track_user_${userId}` },
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'user_stats' }
            ]
          ]
        }
      });

      return NextResponse.json({
        success: true,
        isNewUser: true,
        userId,
        page,
        timestamp: new Date().toISOString()
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await Users.findOneAndUpdate(
        { userId },
        {
          $set: {
            ip: clientIP,
            userAgent: clientUserAgent,
            referrer: referrer || null,
            lastVisit: new Date()
          },
          $inc: { visitCount: 1 }
        }
      );

      return NextResponse.json({
        success: true,
        isNewUser: false,
        userId,
        page,
        visitCount: existingUser.visitCount + 1,
        timestamp: new Date().toISOString()
      });
    }

  } catch (error) {
    console.error('User tracking error:', error);
    return NextResponse.json(
      { error: 'Failed to track user' },
      { status: 500 }
    );
  }
}
